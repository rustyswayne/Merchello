// <auto-generated/> - StyleCop hack to not enforce enum value commentation in this file.
namespace Merchello.Core.Acquired.Persistence.Querying
{
    using System;
    using System.Linq.Expressions;

    using Merchello.Core.Persistence.Mappers;
    using Merchello.Core.Persistence.SqlSyntax;

    internal class ModelToSqlExpressionHelper<T> : BaseExpressionHelper<T>
    {
        private readonly BaseMapper _mapper;

        public ModelToSqlExpressionHelper(ISqlSyntaxProviderAdapter sqlSyntax, BaseMapper mapper)
            : base(sqlSyntax)
        {
            if (mapper == null) throw new ArgumentNullException("mapper");
            this._mapper = mapper;
        }

        public ModelToSqlExpressionHelper(ISqlSyntaxProviderAdapter sqlSyntax, IMapperRegister mappers)
            : base(sqlSyntax)
        {
            _mapper = mappers[typeof(T)]; // throws if not found
        }

        protected override string VisitMemberAccess(MemberExpression m)
        {
            if (m.Expression != null &&
                m.Expression.NodeType == ExpressionType.Parameter
                && m.Expression.Type == typeof(T))
            {
                var field = this._mapper.Map(this.SqlSyntax, m.Member.Name, true);
                if (field.IsNullOrWhiteSpace())
                    throw new InvalidOperationException("The mapper returned an empty field for the member name: " + m.Member.Name);
                return field;
            }

            if (m.Expression != null && m.Expression.NodeType == ExpressionType.Convert)
            {
                var field = this._mapper.Map(this.SqlSyntax, m.Member.Name, true);
                if (field.IsNullOrWhiteSpace())
                    throw new InvalidOperationException("The mapper returned an empty field for the member name: " + m.Member.Name);
                return field;
            }

            var member = Expression.Convert(m, typeof(object));
            var lambda = Expression.Lambda<Func<object>>(member);
            var getter = lambda.Compile();
            object o = getter();

            this.SqlParameters.Add(o);
            return string.Format("@{0}", this.SqlParameters.Count - 1);

            //return GetQuotedValue(o, o != null ? o.GetType() : null);

        }

        //protected bool IsFieldName(string quotedExp)
        //{
        //    //Not entirely sure this is reliable, but its better then simply returning true
        //    return quotedExp.LastIndexOf("'", StringComparison.InvariantCultureIgnoreCase) + 1 != quotedExp.Length;
        //}
    }
}