// <auto-generated/> - StyleCop hack to not enforce enum value commentation in this file.
namespace Merchello.Core.Acquired.Persistence.Querying
{
    using System;
    using System.Linq;
    using System.Linq.Expressions;

    using Merchello.Core.Persistence;

    using NPoco;

    internal class PocoToSqlExpressionHelper<T> : Mappers.BaseExpressionHelper<T>
    {
        private readonly PocoData _pd;

        public PocoToSqlExpressionHelper(SqlContext sqlContext)
            : base(sqlContext.SqlSyntax)
        {
            this._pd = sqlContext.PocoDataFactory.ForType(typeof (T));
        }

        public PocoToSqlExpressionHelper(SqlContext sqlContext, Type modelType)
            : base(sqlContext.SqlSyntax)
        {
            this._pd = sqlContext.PocoDataFactory.ForType(modelType);
        }

        protected override string VisitMemberAccess(MemberExpression m)
        {
            if (m.Expression != null && m.Expression.NodeType == ExpressionType.Parameter && m.Expression.Type == typeof (T))
            {
                var field = this.GetFieldName(this._pd, m.Member.Name);
                return field;
            }

            if (m.Expression != null && m.Expression.NodeType == ExpressionType.Convert)
            {
                var field = this.GetFieldName(this._pd, m.Member.Name);
                return field;
            }

            var member = Expression.Convert(m, typeof(object));
            var lambda = Expression.Lambda<Func<object>>(member);
            var getter = lambda.Compile();
            var o = getter();

            this.SqlParameters.Add(o);

            return $"@{this.SqlParameters.Count - 1}";
        }

        protected virtual string GetFieldName(PocoData pocoData, string name)
        {
            var column = pocoData.Columns.FirstOrDefault(x => x.Value.MemberInfoData.Name == name);
            var tableName = this.SqlSyntax.GetQuotedTableName(pocoData.TableInfo.TableName);
            var columnName = this.SqlSyntax.GetQuotedColumnName(column.Value.ColumnName);

            return $"{tableName}.{columnName}";
        }
    }
}